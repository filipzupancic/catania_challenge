# coding: utf-8

"""
    My Title

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Signature(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'revision': 'str',
        'client_id': 'str',
        'type': 'str',
        'text': 'str',
        'html': 'str',
        'is_default': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'revision': 'revision',
        'client_id': 'clientId',
        'type': '$type',
        'text': 'text',
        'html': 'html',
        'is_default': 'isDefault'
    }

    def __init__(self, id=None, name=None, revision=None, client_id=None, type=None, text=None, html=None, is_default=None):
        """
        Signature - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._revision = None
        self._client_id = None
        self._type = None
        self._text = None
        self._html = None
        self._is_default = None

        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if revision is not None:
          self.revision = revision
        if client_id is not None:
          self.client_id = client_id
        self.type = type
        if text is not None:
          self.text = text
        if html is not None:
          self.html = html
        if is_default is not None:
          self.is_default = is_default

    @property
    def id(self):
        """
        Gets the id of this Signature.
        Resource id

        :return: The id of this Signature.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Signature.
        Resource id

        :param id: The id of this Signature.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Signature.
        Resource name or title

        :return: The name of this Signature.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Signature.
        Resource name or title

        :param name: The name of this Signature.
        :type: str
        """

        self._name = name

    @property
    def revision(self):
        """
        Gets the revision of this Signature.
        Resource revision

        :return: The revision of this Signature.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """
        Sets the revision of this Signature.
        Resource revision

        :param revision: The revision of this Signature.
        :type: str
        """

        self._revision = revision

    @property
    def client_id(self):
        """
        Gets the client_id of this Signature.
        Resource client id

        :return: The client_id of this Signature.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this Signature.
        Resource client id

        :param client_id: The client_id of this Signature.
        :type: str
        """

        self._client_id = client_id

    @property
    def type(self):
        """
        Gets the type of this Signature.

        :return: The type of this Signature.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Signature.

        :param type: The type of this Signature.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def text(self):
        """
        Gets the text of this Signature.
        Signature text (BB code)

        :return: The text of this Signature.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """
        Sets the text of this Signature.
        Signature text (BB code)

        :param text: The text of this Signature.
        :type: str
        """

        self._text = text

    @property
    def html(self):
        """
        Gets the html of this Signature.
        Signature HTML

        :return: The html of this Signature.
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """
        Sets the html of this Signature.
        Signature HTML

        :param html: The html of this Signature.
        :type: str
        """

        self._html = html

    @property
    def is_default(self):
        """
        Gets the is_default of this Signature.
        Signature is default

        :return: The is_default of this Signature.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """
        Sets the is_default of this Signature.
        Signature is default

        :param is_default: The is_default of this Signature.
        :type: bool
        """

        self._is_default = is_default

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Signature):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
