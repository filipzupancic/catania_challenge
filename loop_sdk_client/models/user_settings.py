# coding: utf-8

"""
    My Title

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time_zone': 'str',
        'culture_code': 'str',
        'region_code': 'str',
        'registered_date': 'datetime',
        'onboarding_complete': 'bool'
    }

    attribute_map = {
        'time_zone': 'timeZone',
        'culture_code': 'cultureCode',
        'region_code': 'regionCode',
        'registered_date': 'registeredDate',
        'onboarding_complete': 'onboardingComplete'
    }

    def __init__(self, time_zone=None, culture_code=None, region_code=None, registered_date=None, onboarding_complete=None):
        """
        UserSettings - a model defined in Swagger
        """

        self._time_zone = None
        self._culture_code = None
        self._region_code = None
        self._registered_date = None
        self._onboarding_complete = None

        if time_zone is not None:
          self.time_zone = time_zone
        if culture_code is not None:
          self.culture_code = culture_code
        if region_code is not None:
          self.region_code = region_code
        if registered_date is not None:
          self.registered_date = registered_date
        if onboarding_complete is not None:
          self.onboarding_complete = onboarding_complete

    @property
    def time_zone(self):
        """
        Gets the time_zone of this UserSettings.
        Timezone in IANA format (reference: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)

        :return: The time_zone of this UserSettings.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """
        Sets the time_zone of this UserSettings.
        Timezone in IANA format (reference: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)

        :param time_zone: The time_zone of this UserSettings.
        :type: str
        """

        self._time_zone = time_zone

    @property
    def culture_code(self):
        """
        Gets the culture_code of this UserSettings.
        Culture code (reference: https://msdn.microsoft.com/en-us/library/ee825488(v=cs.20).aspx)

        :return: The culture_code of this UserSettings.
        :rtype: str
        """
        return self._culture_code

    @culture_code.setter
    def culture_code(self, culture_code):
        """
        Sets the culture_code of this UserSettings.
        Culture code (reference: https://msdn.microsoft.com/en-us/library/ee825488(v=cs.20).aspx)

        :param culture_code: The culture_code of this UserSettings.
        :type: str
        """

        self._culture_code = culture_code

    @property
    def region_code(self):
        """
        Gets the region_code of this UserSettings.
        Region code (reference ISO short: https://msdn.microsoft.com/en-us/library/ee783932(v=cs.10).aspx)

        :return: The region_code of this UserSettings.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """
        Sets the region_code of this UserSettings.
        Region code (reference ISO short: https://msdn.microsoft.com/en-us/library/ee783932(v=cs.10).aspx)

        :param region_code: The region_code of this UserSettings.
        :type: str
        """

        self._region_code = region_code

    @property
    def registered_date(self):
        """
        Gets the registered_date of this UserSettings.
        User's registered date time

        :return: The registered_date of this UserSettings.
        :rtype: datetime
        """
        return self._registered_date

    @registered_date.setter
    def registered_date(self, registered_date):
        """
        Sets the registered_date of this UserSettings.
        User's registered date time

        :param registered_date: The registered_date of this UserSettings.
        :type: datetime
        """

        self._registered_date = registered_date

    @property
    def onboarding_complete(self):
        """
        Gets the onboarding_complete of this UserSettings.
        User's onboarding complete status.

        :return: The onboarding_complete of this UserSettings.
        :rtype: bool
        """
        return self._onboarding_complete

    @onboarding_complete.setter
    def onboarding_complete(self, onboarding_complete):
        """
        Sets the onboarding_complete of this UserSettings.
        User's onboarding complete status.

        :param onboarding_complete: The onboarding_complete of this UserSettings.
        :type: bool
        """

        self._onboarding_complete = onboarding_complete

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UserSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
