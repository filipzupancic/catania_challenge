# coding: utf-8

"""
    My Title

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CommentApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def comment_create_comment_chat(self, comment_chat, **kwargs):
        """
        Create comment on chat or shared card.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.comment_create_comment_chat(comment_chat, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CommentChat comment_chat: Comment chat object (required)
        :param datetime custom_create_date_time: Custom created datetime
        :param str source_resource_id: Id of mail comment or mail card to create/copy shared card from.
        :param str authorization: Authorization header
        :param str x_impersonate_user: Impersonation header
        :return: CommentChat
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.comment_create_comment_chat_with_http_info(comment_chat, **kwargs)
        else:
            (data) = self.comment_create_comment_chat_with_http_info(comment_chat, **kwargs)
            return data

    def comment_create_comment_chat_with_http_info(self, comment_chat, **kwargs):
        """
        Create comment on chat or shared card.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.comment_create_comment_chat_with_http_info(comment_chat, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CommentChat comment_chat: Comment chat object (required)
        :param datetime custom_create_date_time: Custom created datetime
        :param str source_resource_id: Id of mail comment or mail card to create/copy shared card from.
        :param str authorization: Authorization header
        :param str x_impersonate_user: Impersonation header
        :return: CommentChat
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['comment_chat', 'custom_create_date_time', 'source_resource_id', 'authorization', 'x_impersonate_user', "skip_bb_code_escaping"]
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method comment_create_comment_chat" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'comment_chat' is set
        if ('comment_chat' not in params) or (params['comment_chat'] is None):
            raise ValueError("Missing the required parameter `comment_chat` when calling `comment_create_comment_chat`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'custom_create_date_time' in params:
            query_params.append(('customCreateDateTime', params['custom_create_date_time']))
        if 'source_resource_id' in params:
            query_params.append(('sourceResourceId', params['source_resource_id']))
        if 'skip_bb_code_escaping' in params:
            query_params.append(('skipBbCodeEscaping', params['skip_bb_code_escaping']))

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'x_impersonate_user' in params:
            header_params['X-Impersonate-User'] = params['x_impersonate_user']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'comment_chat' in params:
            body_params = params['comment_chat']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/comment/chat', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CommentChat',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def comment_create_comment_mail(self, comment_mail, **kwargs):
        """
        Create comment on email card.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.comment_create_comment_mail(comment_mail, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CommentMail comment_mail: Comment mail object (required)
        :param datetime custom_create_date_time: Custom created datetime
        :param str signature_id: Optional id of signature
        :param str authorization: Authorization header
        :param str x_impersonate_user: Impersonation header
        :return: CommentMail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.comment_create_comment_mail_with_http_info(comment_mail, **kwargs)
        else:
            (data) = self.comment_create_comment_mail_with_http_info(comment_mail, **kwargs)
            return data

    def comment_create_comment_mail_with_http_info(self, comment_mail, **kwargs):
        """
        Create comment on email card.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.comment_create_comment_mail_with_http_info(comment_mail, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CommentMail comment_mail: Comment mail object (required)
        :param datetime custom_create_date_time: Custom created datetime
        :param str signature_id: Optional id of signature
        :param str authorization: Authorization header
        :param str x_impersonate_user: Impersonation header
        :return: CommentMail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['comment_mail', 'custom_create_date_time', 'signature_id', 'authorization', 'x_impersonate_user']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method comment_create_comment_mail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'comment_mail' is set
        if ('comment_mail' not in params) or (params['comment_mail'] is None):
            raise ValueError("Missing the required parameter `comment_mail` when calling `comment_create_comment_mail`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'custom_create_date_time' in params:
            query_params.append(('customCreateDateTime', params['custom_create_date_time']))
        if 'signature_id' in params:
            query_params.append(('signatureId', params['signature_id']))

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'x_impersonate_user' in params:
            header_params['X-Impersonate-User'] = params['x_impersonate_user']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'comment_mail' in params:
            body_params = params['comment_mail']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/comment/mail', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CommentMail',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def comment_get(self, id, **kwargs):
        """
        Get comment by id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.comment_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Comment id (required)
        :param str html_format: Html format of comment body
        :param str authorization: Authorization header
        :param str x_impersonate_user: Impersonation header
        :return: CommentBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.comment_get_with_http_info(id, **kwargs)
        else:
            (data) = self.comment_get_with_http_info(id, **kwargs)
            return data

    def comment_get_with_http_info(self, id, **kwargs):
        """
        Get comment by id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.comment_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Comment id (required)
        :param str html_format: Html format of comment body
        :param str authorization: Authorization header
        :param str x_impersonate_user: Impersonation header
        :return: CommentBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'html_format', 'authorization', 'x_impersonate_user']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method comment_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `comment_get`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'html_format' in params:
            query_params.append(('htmlFormat', params['html_format']))

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'x_impersonate_user' in params:
            header_params['X-Impersonate-User'] = params['x_impersonate_user']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/comment/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CommentBase',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def comment_get_comment_preview(self, id, **kwargs):
        """
        Get comment by id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.comment_get_comment_preview(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Comment id (required)
        :param str authorization: Authorization header
        :param str x_impersonate_user: Impersonation header
        :return: CommentPreview
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.comment_get_comment_preview_with_http_info(id, **kwargs)
        else:
            (data) = self.comment_get_comment_preview_with_http_info(id, **kwargs)
            return data

    def comment_get_comment_preview_with_http_info(self, id, **kwargs):
        """
        Get comment by id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.comment_get_comment_preview_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Comment id (required)
        :param str authorization: Authorization header
        :param str x_impersonate_user: Impersonation header
        :return: CommentPreview
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization', 'x_impersonate_user']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method comment_get_comment_preview" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `comment_get_comment_preview`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'x_impersonate_user' in params:
            header_params['X-Impersonate-User'] = params['x_impersonate_user']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/comment/{id}/preview', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CommentPreview',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def comment_get_list(self, offset, size, **kwargs):
        """
        Get list of comments.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.comment_get_list(offset, size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int offset: Requested page offset. (required)
        :param int size: Requested page size. (required)
        :param str sort_order: Order of comments by modified date time (default is descending).
        :param datetime offset_modified: Include comments from/sice (as per requested sort order) its modified date.
        :param list[str] comment_ids: List of comment ids to filter comment list by.
        :param str search_query: Plaintext search query to filter comment list by. Please use prefix 'To:' or 'From:' in order to filter by recipient oy by sender.
        :param list[str] recipient_ids: List of recipient ids (either a user or a group) to filter comment list by.
        :param list[str] sender_ids: List of user ids as senders (From) to filter comment list by.
        :param str contact_filter_relation: Query relation for contact filters (userIds, groupIds and senderIds). Default is 'or'.
        :param list[str] tags: List of tags to filter card list by.
        :param list[CardType] card_types: List of card types to filter card list by.
        :param str html_format: Html format of comment body.
        :param str authorization: Authorization header.
        :param str x_impersonate_user: Impersonation header.
        :return: ListOfResourcesOfCommentBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.comment_get_list_with_http_info(offset, size, **kwargs)
        else:
            (data) = self.comment_get_list_with_http_info(offset, size, **kwargs)
            return data

    def comment_get_list_with_http_info(self, offset, size, **kwargs):
        """
        Get list of comments.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.comment_get_list_with_http_info(offset, size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int offset: Requested page offset. (required)
        :param int size: Requested page size. (required)
        :param str sort_order: Order of comments by modified date time (default is descending).
        :param datetime offset_modified: Include comments from/sice (as per requested sort order) its modified date.
        :param list[str] comment_ids: List of comment ids to filter comment list by.
        :param str search_query: Plaintext search query to filter comment list by. Please use prefix 'To:' or 'From:' in order to filter by recipient oy by sender.
        :param list[str] recipient_ids: List of recipient ids (either a user or a group) to filter comment list by.
        :param list[str] sender_ids: List of user ids as senders (From) to filter comment list by.
        :param str contact_filter_relation: Query relation for contact filters (userIds, groupIds and senderIds). Default is 'or'.
        :param list[str] tags: List of tags to filter card list by.
        :param list[CardType] card_types: List of card types to filter card list by.
        :param str html_format: Html format of comment body.
        :param str authorization: Authorization header.
        :param str x_impersonate_user: Impersonation header.
        :return: ListOfResourcesOfCommentBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'size', 'sort_order', 'offset_modified', 'comment_ids', 'search_query', 'recipient_ids', 'sender_ids', 'contact_filter_relation', 'tags', 'card_types', 'html_format', 'authorization', 'x_impersonate_user', "comment_ids"]
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method comment_get_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'offset' is set
        if ('offset' not in params) or (params['offset'] is None):
            raise ValueError("Missing the required parameter `offset` when calling `comment_get_list`")
        # verify the required parameter 'size' is set
        if ('size' not in params) or (params['size'] is None):
            raise ValueError("Missing the required parameter `size` when calling `comment_get_list`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))
        if 'offset_modified' in params:
            query_params.append(('offsetModified', params['offset_modified']))
        if 'comment_ids' in params:
            query_params.append(('commentIds', params['comment_ids']))
            collection_formats['commentIds'] = 'multi'
        if 'search_query' in params:
            query_params.append(('searchQuery', params['search_query']))
        if 'recipient_ids' in params:
            query_params.append(('recipientIds', params['recipient_ids']))
            collection_formats['recipientIds'] = 'multi'
        if 'sender_ids' in params:
            query_params.append(('senderIds', params['sender_ids']))
            collection_formats['senderIds'] = 'multi'
        if 'contact_filter_relation' in params:
            query_params.append(('contactFilterRelation', params['contact_filter_relation']))
        if 'tags' in params:
            query_params.append(('tags', params['tags']))
            collection_formats['tags'] = 'multi'
        if 'card_types' in params:
            query_params.append(('cardTypes', params['card_types']))
            collection_formats['cardTypes'] = 'multi'
        if 'html_format' in params:
            query_params.append(('htmlFormat', params['html_format']))
        if 'comment_ids' in params:
            query_params.append(('commentIds', params['comment_ids']))

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'x_impersonate_user' in params:
            header_params['X-Impersonate-User'] = params['x_impersonate_user']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/comment/list', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ListOfResourcesOfCommentBase',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
