# coding: utf-8

"""
    My Title

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CardCommentsBatchUpdate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'card_id': 'str',
        'tag_to_remove': 'str',
        'tag_to_add': 'str'
    }

    attribute_map = {
        'card_id': 'cardId',
        'tag_to_remove': 'tagToRemove',
        'tag_to_add': 'tagToAdd'
    }

    def __init__(self, card_id=None, tag_to_remove=None, tag_to_add=None):
        """
        CardCommentsBatchUpdate - a model defined in Swagger
        """

        self._card_id = None
        self._tag_to_remove = None
        self._tag_to_add = None

        self.card_id = card_id
        self.tag_to_remove = tag_to_remove
        self.tag_to_add = tag_to_add

    @property
    def card_id(self):
        """
        Gets the card_id of this CardCommentsBatchUpdate.
        Id of card where comments must be updated

        :return: The card_id of this CardCommentsBatchUpdate.
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """
        Sets the card_id of this CardCommentsBatchUpdate.
        Id of card where comments must be updated

        :param card_id: The card_id of this CardCommentsBatchUpdate.
        :type: str
        """
        if card_id is None:
            raise ValueError("Invalid value for `card_id`, must not be `None`")

        self._card_id = card_id

    @property
    def tag_to_remove(self):
        """
        Gets the tag_to_remove of this CardCommentsBatchUpdate.
        Id of tag that should be removed

        :return: The tag_to_remove of this CardCommentsBatchUpdate.
        :rtype: str
        """
        return self._tag_to_remove

    @tag_to_remove.setter
    def tag_to_remove(self, tag_to_remove):
        """
        Sets the tag_to_remove of this CardCommentsBatchUpdate.
        Id of tag that should be removed

        :param tag_to_remove: The tag_to_remove of this CardCommentsBatchUpdate.
        :type: str
        """
        if tag_to_remove is None:
            raise ValueError("Invalid value for `tag_to_remove`, must not be `None`")

        self._tag_to_remove = tag_to_remove

    @property
    def tag_to_add(self):
        """
        Gets the tag_to_add of this CardCommentsBatchUpdate.
        Id of tag that should be added

        :return: The tag_to_add of this CardCommentsBatchUpdate.
        :rtype: str
        """
        return self._tag_to_add

    @tag_to_add.setter
    def tag_to_add(self, tag_to_add):
        """
        Sets the tag_to_add of this CardCommentsBatchUpdate.
        Id of tag that should be added

        :param tag_to_add: The tag_to_add of this CardCommentsBatchUpdate.
        :type: str
        """
        if tag_to_add is None:
            raise ValueError("Invalid value for `tag_to_add`, must not be `None`")

        self._tag_to_add = tag_to_add

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CardCommentsBatchUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
