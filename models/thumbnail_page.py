# coding: utf-8

"""
    My Title

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ThumbnailPage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'page_number': 'int',
        'width': 'int',
        'height': 'int',
        'has_pdf': 'bool'
    }

    attribute_map = {
        'page_number': 'pageNumber',
        'width': 'width',
        'height': 'height',
        'has_pdf': 'hasPdf'
    }

    def __init__(self, page_number=None, width=None, height=None, has_pdf=None):
        """
        ThumbnailPage - a model defined in Swagger
        """

        self._page_number = None
        self._width = None
        self._height = None
        self._has_pdf = None

        self.page_number = page_number
        self.width = width
        self.height = height
        self.has_pdf = has_pdf

    @property
    def page_number(self):
        """
        Gets the page_number of this ThumbnailPage.
        Page number

        :return: The page_number of this ThumbnailPage.
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """
        Sets the page_number of this ThumbnailPage.
        Page number

        :param page_number: The page_number of this ThumbnailPage.
        :type: int
        """
        if page_number is None:
            raise ValueError("Invalid value for `page_number`, must not be `None`")

        self._page_number = page_number

    @property
    def width(self):
        """
        Gets the width of this ThumbnailPage.
        Page width

        :return: The width of this ThumbnailPage.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """
        Sets the width of this ThumbnailPage.
        Page width

        :param width: The width of this ThumbnailPage.
        :type: int
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")

        self._width = width

    @property
    def height(self):
        """
        Gets the height of this ThumbnailPage.
        Page height

        :return: The height of this ThumbnailPage.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """
        Sets the height of this ThumbnailPage.
        Page height

        :param height: The height of this ThumbnailPage.
        :type: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")

        self._height = height

    @property
    def has_pdf(self):
        """
        Gets the has_pdf of this ThumbnailPage.
        PDF exists for this file

        :return: The has_pdf of this ThumbnailPage.
        :rtype: bool
        """
        return self._has_pdf

    @has_pdf.setter
    def has_pdf(self, has_pdf):
        """
        Sets the has_pdf of this ThumbnailPage.
        PDF exists for this file

        :param has_pdf: The has_pdf of this ThumbnailPage.
        :type: bool
        """
        if has_pdf is None:
            raise ValueError("Invalid value for `has_pdf`, must not be `None`")

        self._has_pdf = has_pdf

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ThumbnailPage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
