# coding: utf-8

"""
    My Title

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ThumbnailInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'supported': 'bool',
        'failed': 'bool',
        'ready': 'bool'
    }

    attribute_map = {
        'supported': 'supported',
        'failed': 'failed',
        'ready': 'ready'
    }

    def __init__(self, supported=None, failed=None, ready=None):
        """
        ThumbnailInfo - a model defined in Swagger
        """

        self._supported = None
        self._failed = None
        self._ready = None

        self.supported = supported
        self.failed = failed
        self.ready = ready

    @property
    def supported(self):
        """
        Gets the supported of this ThumbnailInfo.
        If thumbnail for this file type is supported (do not GET thumbnail if this is set to false)

        :return: The supported of this ThumbnailInfo.
        :rtype: bool
        """
        return self._supported

    @supported.setter
    def supported(self, supported):
        """
        Sets the supported of this ThumbnailInfo.
        If thumbnail for this file type is supported (do not GET thumbnail if this is set to false)

        :param supported: The supported of this ThumbnailInfo.
        :type: bool
        """
        if supported is None:
            raise ValueError("Invalid value for `supported`, must not be `None`")

        self._supported = supported

    @property
    def failed(self):
        """
        Gets the failed of this ThumbnailInfo.
        If thumbnail generation for this file has failed (do not GET thumbnail if this is set to true)

        :return: The failed of this ThumbnailInfo.
        :rtype: bool
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """
        Sets the failed of this ThumbnailInfo.
        If thumbnail generation for this file has failed (do not GET thumbnail if this is set to true)

        :param failed: The failed of this ThumbnailInfo.
        :type: bool
        """
        if failed is None:
            raise ValueError("Invalid value for `failed`, must not be `None`")

        self._failed = failed

    @property
    def ready(self):
        """
        Gets the ready of this ThumbnailInfo.
        If thumbnail for this file is ready (you can now GET thumbnail if this is set to true)

        :return: The ready of this ThumbnailInfo.
        :rtype: bool
        """
        return self._ready

    @ready.setter
    def ready(self, ready):
        """
        Sets the ready of this ThumbnailInfo.
        If thumbnail for this file is ready (you can now GET thumbnail if this is set to true)

        :param ready: The ready of this ThumbnailInfo.
        :type: bool
        """
        if ready is None:
            raise ValueError("Invalid value for `ready`, must not be `None`")

        self._ready = ready

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ThumbnailInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
