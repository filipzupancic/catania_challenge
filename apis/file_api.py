# coding: utf-8

"""
    My Title

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class FileApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def file_create_file(self, **kwargs):
        """
        Upload file
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.file_create_file(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file: File object
        :param str authorization: Authorization header
        :param str x_impersonate_user: Impersonation header
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.file_create_file_with_http_info(**kwargs)
        else:
            (data) = self.file_create_file_with_http_info(**kwargs)
            return data

    def file_create_file_with_http_info(self, **kwargs):
        """
        Upload file
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.file_create_file_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file: File object
        :param str authorization: Authorization header
        :param str x_impersonate_user: Impersonation header
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'authorization', 'x_impersonate_user']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_create_file" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'x_impersonate_user' in params:
            header_params['X-Impersonate-User'] = params['x_impersonate_user']

        form_params = []
        local_var_files = {}
        if 'file' in params and isinstance(params.get("file"), str):
            local_var_files['file'] = params['file']
        else:
            form_params.append(params.get("file"))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/file', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='File',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def file_get_file(self, id, **kwargs):
        """
        Get file content
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.file_get_file(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: File id (required)
        :param str authorization: Authorization header
        :param str x_impersonate_user: Impersonation header
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.file_get_file_with_http_info(id, **kwargs)
        else:
            (data) = self.file_get_file_with_http_info(id, **kwargs)
            return data

    def file_get_file_with_http_info(self, id, **kwargs):
        """
        Get file content
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.file_get_file_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: File id (required)
        :param str authorization: Authorization header
        :param str x_impersonate_user: Impersonation header
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization', 'x_impersonate_user']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_get_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `file_get_file`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'x_impersonate_user' in params:
            header_params['X-Impersonate-User'] = params['x_impersonate_user']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/file/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='File',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def file_get_file_content(self, id, **kwargs):
        """
        Get file content
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.file_get_file_content(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: File id (required)
        :param str authorization: Authorization header
        :param str e_tag: EntityTag header
        :param str x_impersonate_user: Impersonation header
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.file_get_file_content_with_http_info(id, **kwargs)
        else:
            (data) = self.file_get_file_content_with_http_info(id, **kwargs)
            return data

    def file_get_file_content_with_http_info(self, id, **kwargs):
        """
        Get file content
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.file_get_file_content_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: File id (required)
        :param str authorization: Authorization header
        :param str e_tag: EntityTag header
        :param str x_impersonate_user: Impersonation header
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization', 'e_tag', 'x_impersonate_user']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_get_file_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `file_get_file_content`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'e_tag' in params:
            header_params['ETag'] = params['e_tag']
        if 'x_impersonate_user' in params:
            header_params['X-Impersonate-User'] = params['x_impersonate_user']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/file/{id}/content', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='file',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def file_get_file_pdf(self, id, **kwargs):
        """
        Get file content converted to pdf format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.file_get_file_pdf(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: File id (required)
        :param str authorization: Authorization header
        :param str e_tag: EntityTag header
        :param str x_impersonate_user: Impersonation header
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.file_get_file_pdf_with_http_info(id, **kwargs)
        else:
            (data) = self.file_get_file_pdf_with_http_info(id, **kwargs)
            return data

    def file_get_file_pdf_with_http_info(self, id, **kwargs):
        """
        Get file content converted to pdf format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.file_get_file_pdf_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: File id (required)
        :param str authorization: Authorization header
        :param str e_tag: EntityTag header
        :param str x_impersonate_user: Impersonation header
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization', 'e_tag', 'x_impersonate_user']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_get_file_pdf" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `file_get_file_pdf`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'e_tag' in params:
            header_params['ETag'] = params['e_tag']
        if 'x_impersonate_user' in params:
            header_params['X-Impersonate-User'] = params['x_impersonate_user']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/file/{id}/pdf', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='file',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def file_get_file_thumbnail(self, id, **kwargs):
        """
        Get file thumbnail.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.file_get_file_thumbnail(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: File id (required)
        :param str thumbnail_size: Thumbnail size, values: Small, Large, Medium
        :param int thumbnail_page: Thumbnail page
        :param str authorization: Authorization header
        :param str e_tag: EntityTag header
        :param str x_impersonate_user: Impersonation header
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.file_get_file_thumbnail_with_http_info(id, **kwargs)
        else:
            (data) = self.file_get_file_thumbnail_with_http_info(id, **kwargs)
            return data

    def file_get_file_thumbnail_with_http_info(self, id, **kwargs):
        """
        Get file thumbnail.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.file_get_file_thumbnail_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: File id (required)
        :param str thumbnail_size: Thumbnail size, values: Small, Large, Medium
        :param int thumbnail_page: Thumbnail page
        :param str authorization: Authorization header
        :param str e_tag: EntityTag header
        :param str x_impersonate_user: Impersonation header
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'thumbnail_size', 'thumbnail_page', 'authorization', 'e_tag', 'x_impersonate_user']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_get_file_thumbnail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `file_get_file_thumbnail`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'thumbnail_size' in params:
            query_params.append(('thumbnailSize', params['thumbnail_size']))
        if 'thumbnail_page' in params:
            query_params.append(('thumbnailPage', params['thumbnail_page']))

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'e_tag' in params:
            header_params['ETag'] = params['e_tag']
        if 'x_impersonate_user' in params:
            header_params['X-Impersonate-User'] = params['x_impersonate_user']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/file/{id}/thumbnail', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='file',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def file_get_list(self, offset, size, **kwargs):
        """
        Get list of files.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.file_get_list(offset, size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int offset: Requested page offset. (required)
        :param int size: Requested page size. (required)
        :param str sort_order: Order of comments by modified date time (default is descending).
        :param datetime offset_modified: Include files from/sice (as per requested sort order) its modified date.
        :param str search_query: Plaintext search query to filter file list by. Please use prefix 'To:' or 'From:' in order to filter by recipient oy by sender.
        :param list[str] recipient_ids: List of recipient ids (either a user or a group) to filter file list by.
        :param list[str] sender_ids: List of user ids as senders (From) to filter comment list by.
        :param str contact_filter_relation: Query relation for contact filters (userIds, groupIds and senderIds). Default is 'or'.
        :param list[CardType] card_types: List of card types to filter file list by.
        :param str authorization: Authorization header.
        :param str x_impersonate_user: Impersonation header.
        :return: ListOfResourcesOfFile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.file_get_list_with_http_info(offset, size, **kwargs)
        else:
            (data) = self.file_get_list_with_http_info(offset, size, **kwargs)
            return data

    def file_get_list_with_http_info(self, offset, size, **kwargs):
        """
        Get list of files.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.file_get_list_with_http_info(offset, size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int offset: Requested page offset. (required)
        :param int size: Requested page size. (required)
        :param str sort_order: Order of comments by modified date time (default is descending).
        :param datetime offset_modified: Include files from/sice (as per requested sort order) its modified date.
        :param str search_query: Plaintext search query to filter file list by. Please use prefix 'To:' or 'From:' in order to filter by recipient oy by sender.
        :param list[str] recipient_ids: List of recipient ids (either a user or a group) to filter file list by.
        :param list[str] sender_ids: List of user ids as senders (From) to filter comment list by.
        :param str contact_filter_relation: Query relation for contact filters (userIds, groupIds and senderIds). Default is 'or'.
        :param list[CardType] card_types: List of card types to filter file list by.
        :param str authorization: Authorization header.
        :param str x_impersonate_user: Impersonation header.
        :return: ListOfResourcesOfFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'size', 'sort_order', 'offset_modified', 'search_query', 'recipient_ids', 'sender_ids', 'contact_filter_relation', 'card_types', 'authorization', 'x_impersonate_user']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_get_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'offset' is set
        if ('offset' not in params) or (params['offset'] is None):
            raise ValueError("Missing the required parameter `offset` when calling `file_get_list`")
        # verify the required parameter 'size' is set
        if ('size' not in params) or (params['size'] is None):
            raise ValueError("Missing the required parameter `size` when calling `file_get_list`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))
        if 'offset_modified' in params:
            query_params.append(('offsetModified', params['offset_modified']))
        if 'search_query' in params:
            query_params.append(('searchQuery', params['search_query']))
        if 'recipient_ids' in params:
            query_params.append(('recipientIds', params['recipient_ids']))
            collection_formats['recipientIds'] = 'multi'
        if 'sender_ids' in params:
            query_params.append(('senderIds', params['sender_ids']))
            collection_formats['senderIds'] = 'multi'
        if 'contact_filter_relation' in params:
            query_params.append(('contactFilterRelation', params['contact_filter_relation']))
        if 'card_types' in params:
            query_params.append(('cardTypes', params['card_types']))
            collection_formats['cardTypes'] = 'multi'

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'x_impersonate_user' in params:
            header_params['X-Impersonate-User'] = params['x_impersonate_user']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/file/list', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ListOfResourcesOfFile',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
