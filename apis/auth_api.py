# coding: utf-8

"""
    My Title

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AuthApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def auth_create_exchange_auth(self, auth_exchange, **kwargs):
        """
        Send authorization request for MS Exchange account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.auth_create_exchange_auth(auth_exchange, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AuthExchange auth_exchange: Exchange authorization (required)
        :return: AuthExchange
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.auth_create_exchange_auth_with_http_info(auth_exchange, **kwargs)
        else:
            (data) = self.auth_create_exchange_auth_with_http_info(auth_exchange, **kwargs)
            return data

    def auth_create_exchange_auth_with_http_info(self, auth_exchange, **kwargs):
        """
        Send authorization request for MS Exchange account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.auth_create_exchange_auth_with_http_info(auth_exchange, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AuthExchange auth_exchange: Exchange authorization (required)
        :return: AuthExchange
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_exchange']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_create_exchange_auth" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_exchange' is set
        if ('auth_exchange' not in params) or (params['auth_exchange'] is None):
            raise ValueError("Missing the required parameter `auth_exchange` when calling `auth_create_exchange_auth`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'auth_exchange' in params:
            body_params = params['auth_exchange']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/auth/exchange', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AuthExchange',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def auth_create_gmail_auth(self, auth_google, **kwargs):
        """
        Send authorization request for gmail account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.auth_create_gmail_auth(auth_google, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AuthGoogle auth_google: Google authorization (required)
        :return: AuthGoogle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.auth_create_gmail_auth_with_http_info(auth_google, **kwargs)
        else:
            (data) = self.auth_create_gmail_auth_with_http_info(auth_google, **kwargs)
            return data

    def auth_create_gmail_auth_with_http_info(self, auth_google, **kwargs):
        """
        Send authorization request for gmail account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.auth_create_gmail_auth_with_http_info(auth_google, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AuthGoogle auth_google: Google authorization (required)
        :return: AuthGoogle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_google']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_create_gmail_auth" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_google' is set
        if ('auth_google' not in params) or (params['auth_google'] is None):
            raise ValueError("Missing the required parameter `auth_google` when calling `auth_create_gmail_auth`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'auth_google' in params:
            body_params = params['auth_google']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/auth/gmail', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AuthGoogle',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def auth_create_integration_auth(self, auth_integration, **kwargs):
        """
        Send authorization request for integration account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.auth_create_integration_auth(auth_integration, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AuthIntegration auth_integration: Integration authorization (required)
        :return: AuthIntegration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.auth_create_integration_auth_with_http_info(auth_integration, **kwargs)
        else:
            (data) = self.auth_create_integration_auth_with_http_info(auth_integration, **kwargs)
            return data

    def auth_create_integration_auth_with_http_info(self, auth_integration, **kwargs):
        """
        Send authorization request for integration account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.auth_create_integration_auth_with_http_info(auth_integration, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AuthIntegration auth_integration: Integration authorization (required)
        :return: AuthIntegration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_integration']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_create_integration_auth" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_integration' is set
        if ('auth_integration' not in params) or (params['auth_integration'] is None):
            raise ValueError("Missing the required parameter `auth_integration` when calling `auth_create_integration_auth`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'auth_integration' in params:
            body_params = params['auth_integration']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/auth/integration', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AuthIntegration',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def auth_create_test_auth(self, auth_test, **kwargs):
        """
        Send authorization request for test account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.auth_create_test_auth(auth_test, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AuthTest auth_test: Test authorization (required)
        :return: AuthTest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.auth_create_test_auth_with_http_info(auth_test, **kwargs)
        else:
            (data) = self.auth_create_test_auth_with_http_info(auth_test, **kwargs)
            return data

    def auth_create_test_auth_with_http_info(self, auth_test, **kwargs):
        """
        Send authorization request for test account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.auth_create_test_auth_with_http_info(auth_test, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AuthTest auth_test: Test authorization (required)
        :return: AuthTest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_test']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_create_test_auth" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_test' is set
        if ('auth_test' not in params) or (params['auth_test'] is None):
            raise ValueError("Missing the required parameter `auth_test` when calling `auth_create_test_auth`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'auth_test' in params:
            body_params = params['auth_test']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/api/v1/auth/test', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AuthTest',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
